COMMANDS:

CLI = Command Line Interface
GUI = Graphical user Interface
WSL & WSL 2 = Windows Sub System for Linux (2)
Terminal emulator = A program that accepts text based commands and renders text on your system. 
Shell = REPL's 
R = Read
E = Evaluate
P = Print
L = Loop
History = Shows history
pwd = print working directory
ls = List command. Has a -l option that allows you to see the permissions of each file and directory in long format. 
lsd = Same thing as ls but updated newer version. --tree and --classic are some of the flags used with lsd
cd = Change directory
.. = It's a shortcut that you can use to move up one level in the directory tree.
cat = used to veiw the contents of a file. It's short for "concatenate", which is a fancy way of saying "put things together". 
    It can feel like a confusing name if you're using the cat command to view a single file, but it makes more sense when you're using it to view multiple files at once.
head = The head command prints the first n lines of a file, where n is a number you specify. Example- head -n 10 file1.txt If you don't specify a number, it will default to 10.
tail = The tail command prints the last n lines of a file, where n is a number you specify.
more and less = The more and less commands let you view the contents of a file one page (or line) at a time.
mkdir = The "make directory" command creates a new directory inside the current directory.
mv = The move command moves a file or directory from one location to another.  You can use it to rename a file or to move it to a different directory altogether. 
rm = The remove command deletes a file or empty directory: You can optionally add a -r flag to tell the rm command to delete a directory and all of its contents recursively.
    "Recursively" is just a fancy way of saying "do it again on all of the subdirectories and their contents".
cp = Copy command does what you would (hopefully) expect: it copies a file from one location to another.
grep = Allows you to search for text in files.
tab key =  Start typing the name of a file or directory and then press tab, your shell will try to autocomplete the name for you.
find =  A powerful tool for finding files and directories by name, not by their contents.
sudo = Lets you run a command as a "superuser". Its short for "superuser do"
whoami = a command used to see who you're logged in as.
sudo whoami = runs the command as root.
chmod = Short for change mode. A command that allows you to change the permissions of a file or directory. The chmod command has a convenient -x flag that will simply remove the executable permission from the file. +x will add permission. 
chown = The chown command allows you to change the owner of a file or directory, and it requires root privileges.
-R = 'Recursive' It means to apply changes to everything inside the directory. 
which = The which command tells you the location of an installed command line program
shebang = A "shebang" is a special line at the top of a script that tells your shell which program to use to execute the file. #! interpreter [optional-arg]  example #!/usr/bin/python3
enviromental variables = Variables that are available to all programs that run in your shell.
env = is used to view all variables that are currently in your shell. 
export = a command used to set a variable in your shell. export NAME="Lane" then same as before use echo $NAME to use the variable.
ls -a ~ = Command used to find shell config file
man = command is short for "manual". It's a program that displays the manual for other programs. / and typing your search then pressing enter is used to search text within the manual.
Flags are options that you can pass to a command to change its behavior.
    For example, the ls command can take a -l flag to show a "long" listing of files: ls -l
    The ls command can also take a -a flag to show "all" files, including hidden files: ls -a
    You can combine flags: ls -al
wc = word count command.  command to count the number of lines, words, and bytes in the files specified by the File parameter.
help or -h or  --help(Flag) = a option used to find out more about commands and tools in the shell
curl = a command used to make network requests from the command line.
unset = a command used to unset a variable, Example unset ENV_VARIABLE_NAME alternativly you can set a varibale with the export ENV_VARIABLE_NAME=""
ctrl + c = Used to stop a program from running. send a "SIGNIT" signal to the program which tells it to stop.
cat > file_name = then ctrl + c can create a file in a directory. 



To access a created variable prefix the variable with $. Example 
create variable = name="Preston"
Use variable = echo $name
Pints = Preston

Directories (same as "folders" on Windows) are just containers that hold files and other directories.
Files are just a dump of raw binary data: 1's and 0's. The bytes in a file can represent anything: text, images, videos, etc.

The filesystem tree starts with a single directory called the root directory. The root directory contains files and directories, which can contain more files and directories, and so on.

The text might be different, but the structure should be the same. Let's break it down:

**The first slash (/) represents the root directory. It's the tippy-top of the filesystem tree.
The next part (Users) is the name of a directory inside the root directory.
Finally, the last part (wagslane) is the name of a directory inside the Users directory**

So this path represents a directory 2 levels down from the root directory:

root
  └── Users
        └── wagslane




Relative filepaths which are just paths that take into account your current directory. 
vehicles
├── cars
│   ├── fords
│   │   ├── mustang.txt
│   │   └── focus.txt

When inside the top-level vehicles directory, the relative path to the mustang.txt file is:
cars/fords/mustang.txt

However, when we're inside the cars directory, the relative path to the mustang.txt file is just:
fords/mustang.txt

Or when inside the fords directory, just:
mustang.txt



On Unix-like systems (Mac OS/Linux/WSL), the root is denoted by a forward slash /
An absolute path is a path that starts at the root of the filesystem. 

So, if the vehicles directory is in the filesystem root, the absolute path to the mustang.txt file is
/vehicles/cars/fords/mustang.txt

So, when inside the fords directory, you can use either:
/vehicles/cars/fords/mustang.txt

Or 
mustang.txt


More and less commands
In the context of these commands, less is literally more. The less command does everything that the more command does but also has more features. As a general rule, you should use less instead of more.
You would only use more if you're on a system that doesn't have less installed.

Press "enter" to scroll down a few lines. 

Press "q" to exit the less program and return to your shell prompt.

pass in the -N flag to show line numbers:

Example:
less -N 2023.csv

You can use the spacebar to scroll down a page at a time, and you can go back up by pressing "b".

Move Command:

to move = mv some_file.txt some_other_name.txt
to rename = mv some_file.txt some_directory/some_file.txt
move to new directory = mv some_file.txt some_directory/


copy command:
cp source_file.txt destination/

copy a directory and all of its contents recursively by adding the -R flag:
cp -R my_dir new_dir


You can also search an entire directory, including all subdirectories. For example, if we wanted to search for the word "hello" in the current directory and all subdirectories, we could run:
The . is a special alias for the current directory
grep -r "hello" .


Let's say you're looking for a file named hello.txt somewhere in your home directory. You can use the find command to search for exactly that title:
find some_directory -name hello.txt


The find command can also search for files that match a pattern. For example, if you wanted to find all files that end in .txt, you could run:
find some_directory -name "*.txt"


The * character is a wildcard that matches anything. If you're trying to find filenames that contain a specific word, you can use the * character to match the rest of the filename:
# Find all files that contain the word "chad"
find some_directory -name "*chad*"



PERMISSIONS:


In a Unix-like operating system, permissions control who can do what to which files and directories. The permissions of an individual file or directory are visually represented as a 10-character string:
drwxrwxrwx

Let's break down each character. The first one just tells you whether you're looking at a file or a directory:

-: Regular file (e.g. -rwxrwxrwx)
d: Directory (e.g. drwxrwxrwx)
The next 9 characters are broken up into 3 sets of rwx and represent the permissions themselves for the "owner", "group", and "others", in order. Each group of 3 represents the permissions for reading, writing, and executing, in order. So, for example:

rwx: All permissions

rw-: Read and write, but not execute

r-x: Read and execute, but not write

The first 3 characters are "owner" permissions. The "owner" is usually just the user who created the file or directory, but it can be manually changed.

The next 3 characters are "group" permissions. Unix-like systems support groups of users and a file or directory can be assigned to a single group. To be honest, unless you're a system administrator, you won't often worry about groups.

The last 3 characters are "others" permissions. This is everyone else.

In my experience, when you're doing programming work on your own local machine, you mostly just care about the "owner" permissions because that's usually you. Here are some full examples:

-rwxrwxrwx: A file where everyone can do everything
-rwxr-xr-x: A file where everyone can read and execute, but only the owner can write
drwxr-xr-x: A directory where everyone can read (ls the contents) and execute (cd into it), but only the owner can write (modify the contents)
drwx------: A directory where only the owner can read, write and execute


In the command above, u means "user" (aka "owner"), g means "group", and o means "others". The = means "set the permissions to the following", and the rwx means "read, write and execute". The g= and o= mean "set group and other permissions to nothing". 
The -R means "recursively", which means "do this to all of the contents of the directory as well".
chmod -R u=rwx,g=,o= DIRECTORY


EXECUTABLES


You're probably familiar with the idea of reading and writing files. But what about executing them? Executable files are just programs that you can run on your computer.

Files with a .sh extension are shell scripts. They're just text files that contain shell commands. You can run a file in your shell by just typing its filepath:
mydir/program.sh

Interestingly, if the program is in the current directory (in this example, the mydir directory), you need to prefix it with ./:
./program.sh

removed the permissions from user: -x removes execute ability from owner/user: -x
chmod -x genids.sh

Checks the permissions of the file/directory
./genids.sh

Re-adds the executable permission for the owner: +x
chmod +x FILENAME

The ./ at the beginning of ./process_transactions.sh tells the shell to execute the script located in the current directory. Here is why you need it:

Current Directory: The ./ denotes the current directory. By using ./process_transactions.sh, you're specifying that the script process_transactions.sh should be run from the current directory you are in.
Executable: The script needs to be made executable usually by running chmod +x process_transactions.sh. By using ./, you tell the shell to look for the script in the current directory where you are standing.
Avoid Path Confusion: Not using ./ might cause the shell to search for the script in directories listed in the PATH environment variable. If it is not listed there, the shell will not find it.
Without the ./, the shell wouldn't know you're trying to execute a script from the current directory.

So, ./process_transactions.sh ensures that the shell runs the script from your current directory.

***TIP***
You'll frequently download scripts from the internet to run on your machine, and often you'll need to make them executable before you can run them. I use chmod +x quite often as a developer.

The internet is a shady place. Only run verified scripts from trusted publishers and authors.


The "root" user is a superuser. It has access to everything on the system and can do anything. When you use the sudo command, you're running as the root user (as long as your system hasn't been configured differently).

The sudo keyword is convenient because it quickly gives you elevated permissions to run a single command.

However, it can also be dangerous because it gives you access to everything. If you run a command with sudo that you don't understand, you could do serious damage to your system.

For example, rm with the r and f flags run on the root directory (/), will delete all the files on your system. Don't do that. The r flag is for "recursive" (delete everything inside) and the f flag is for "force". 
Most systems will prevent you from doing this, but if you run it with sudo, you've just turned your computer into a very expensive paperweight.

Some modern systems will actually prevent you from deleting everything by default as a safeguard unless you use --no-preserve-root, but it's still a very bad idea.

sudo rm -rf / will delete everything.

Let's break down this command:
sudo chown -R root contacts

sudo - Run as the root user
chown - Command to change the owner
-R - "Recursive", meaning also apply the changes to everything inside the directory
root - The name of the new owner
contacts - The directory to change the owner of
sudo chown -R root contacts



Compiled programs:
A compiled program is a program that has been converted from human-readable source code into machine code (binary). Machine code is a set of instructions that a computer can execute directly: your computer's CPU is hardware that's been designed to execute machine code.
Machine code being binary 1's and 0's. 

Interpreted programs:
An interpreted program is a program that is executed by another program. The program that executes the interpreted program is called an interpreter. The interpreter reads the source code of the interpreted program and executes it.
Programming languages like Python, Ruby, and JavaScript, are interpreted languages. Your computer needs to have an interpreter installed to run programs written in those languages

Another example is the .sh shell script files we talked about. Those are interpreted by the shell program.



sh - The Bourne shell. This is the original Unix shell and is POSIX-compliant. It's very basic and doesn't have many quality-of-life features.
bash - The Bourne Again shell. This is the most popular shell on Linux. It builds on sh, but also has a lot of extra features.
zsh - The Z shell. This is the most popular shell on macOS. Like bash, it does what sh can do, but also has a lot of extra features.



These files are located in your home directory (~) and are hidden by default. The ls command has a -a flag that will show hidden files:
ls -a ~

Edit the file you believe to be your shell configuration file. You can use the nano command to edit files in your shell:
nano ~/.bashrc

You can use Ctrl+O to save the file (confirm any prompts with "enter"), and then Ctrl+X to exit the editor. (There should be a list of commands at the bottom of the screen.)



HOW TO EDIT SHELL CONFIG FILE:
Determine Your Shell:

Run echo $SHELL in the terminal. This will tell you if you are using Bash, Zsh, etc.

.bashrc is my shell config file its a hidden file found with the ls -a ~ command

Open the File:
For Bash, you will want to edit ~/.bashrc:
nano ~/.bashrc

For Zsh, you will want to edit ~/.zshrc:
nano ~/.zshrc


Add the Export Command:

Move to the end of the file by using the arrow keys.
Add the following line, replacing /path/to/worldbanc/private/bin with the actual path:
export PATH=$PATH:/path/to/worldbanc/private/bin

Save and Exit:

In nano, you can save the file with Ctrl + O and exit with Ctrl + X.
In vim, save the file with :w and exit with :q. If you want to do both at the same time, use :wq.
Reload Your Shell Configuration:

Run:
source ~/.bashrc





A "shebang" is a special line at the top of a script that tells your shell which program to use to execute the file.
The format of a shebang is:
#! interpreter [optional-arg]

For example, if your script is a Python script and you want to use Python 3, your shebang might look like this:
#!/usr/bin/python3

This tells the system to use Python 3 located at /usr/bin/python3 to run the script.



The worldbanc directory that you downloaded has some executables that would be useful to have in your PATH so that you can run them from anywhere. 
Add the worldbanc/private/bin directory to your PATH variable. You'll need to add the absolute path, not the relative path. 
You can get the absolute path by running pwd in the worldbanc/private/bin directory, or by using the realpath command.

To add a directory to your PATH without overwriting all of the existing directories, use the export command and reference the existing PATH variable

EXAMPLE: export PATH="$PATH:/path/to/new"

prestonrivera@DESKTOP-VV8TK75:~/worldbanc/private/bin$ pwd
/home/prestonrivera/worldbanc/private/bin

export PATH="$PATH:/home/prestonrivera/worldbanc/private/bin"

The $PATH part is a reference to the existing PATH variable. The : separates the existing directories from the new directory (/path/to/new) that you're adding.
Then try running the worldbanc.sh CLI Tool.


HELP COMMAND:

By convention, most production-ready CLI tools have a "help" option that will print out some information about how to use the tool. It's usually accessed with one of the following:

--help (flag)
-h (flag)
help (first positional argument)
The "help" output is often easier to parse than a full man page. It's usually more of a quick start guide than a full manual.


EXIT CODES: (sometimes called "return codes" or "status codes") are how programs communicate back whether they ran successfully or not.

0 is the exit code for success. Any other exit code is an error. 9 times out of 10, if a non-zero exit code is returned (meaning an error) it will be 1, which is the "catch-all" error code.

Programs that call other programs use error codes to figure out if execution was successful

In a shell, you can access the exit code of the last program you ran with the question mark (?) variable. For example, if you run a program that exits with a non-zero exit code, you can see what it was with the echo command:

ls ~
echo $?
# 0

ls /does/not/exist
echo $?
# 1


Standard Output: 

usually called "standard out" or "stdout", is the default place where programs print their output. It's just a stream of data that prints to your terminal, but we'll talk later about how it can be redirected to other places.

All programming languages have a simple way to print to stdout. In Python, it's the print function:
print("Hello world")
# Hello world

In a shell, it's the echo command:
echo "Hello world"
# Hello world

You can redirect stdout and stderr to different places using the > and 2> operators. > redirects stdout, and 2> redirects stderr.

Standard Error: usually called "stderr", is the same thing as standard output, but for error messages. It's a stream completely separate from stdout so that you can redirect it to a different place if need be, but by default, it prints to your terminal just like stdout.

REDIRECT STDOUT TO A FILE
echo "Hello world" > hello.txt
cat hello.txt
# Hello world


REDIRECT STDERR TO A FILE
cat doesnotexist.txt 2> error.txt
cat error.txt
# cat: doesnotexist.txt: No such file or directory



Standard Input: usually called "standard in" or "stdin", is the default place where programs read their input. It's just a stream of data that programs can read from as they run.

All programming languages have a simple way to read from stdin. In Python, it's the input function:

# execution stops until the user types
# something (in this case "Lane") and presses enter
name = input("What is your name? ")

print("Hello,", name)
# Hello, Lane!


The pipe operator is |. 
The pipe operator takes the stdout of the program on the left and "pipes" it into the stdin of the program on the right.

echo "Have you heard the tragedy of Darth Plagueis the Wise?" | wc -w
# 10



Use the grep command to find all lines in all of the transactions that include the word "Bob". You'll want to include all of the files in the worldbanc/private/transactions directory, but not the files in the backups directory.

grep -R "Bob" PATH_TO_TRANSACTIONS_DIR --exclude-dir="backups"

I used this format: 
grep -R "Bob" ./ --exclude-dir="backups" | wc -l



INTERRUPT:

Sometimes a program will get stuck and you'll want to stop it. Common reasons for this are:

You made a typo in the command and it's not doing what you want
It's trying to access the internet but you're not connected
It's processing too much data and you don't want to wait for it to finish
There is a bug in the program causing it to hang
In these cases, you can stop the program by pressing ctrl + c. This sends a "SIGINT" signal to the program, which tells it to stop.



Sometimes a program is in such a bad state (or is so malicious) that it doesn't respond to the SIGINT, in which case the best option is to use another shell session (new terminal window) to manually kill the program.

SYNTAX
kill PID

PID stands for "process ID". Every process that's running on your machine has a unique ID. The ps, "process status" command can be used to list the processes running on your machine, and their IDs:

ps aux

The "aux" options just mean "show all processes, including those owned by other users, and show extra information about each process".


A package manager is a software tool that helps you install other software. Its primary functions include:

-Downloading software from official sources
-Installing software
-Updating software
-Removing software
-Managing dependencies
As a developer, you'll frequently use package managers to get access to the software you need to get your work done.
APT, or "Advanced Package Tool", is the primary package manager for Ubuntu.

apt --version = this command is used to check what version package manager youre using.



Vim or Neovim:

You can open a file with Neovim by passing in the file path as an argument:

nvim FILEPATH_HERE

Once it's open, you might notice that you can't type anything. That's because you're in "normal" mode, the mode for navigating and manipulating text. Use the arrow keys (I know, Vim sacrilege) to move your cursor down to the last line.

Enter "insert" mode by pressing the i key. You should see -- INSERT -- appear at the bottom of the screen. You should now be able to delete the password. Replace just the password with the text "REDACTED" in all caps, no quotes.

When you're done, press the esc key to return to normal mode. Then type :w and press enter to save your changes. Finally, type :q and press enter to quit Neovim.

You've successfully edited a file (and escaped from) Neovim!

Use cat to view the contents of the edited file. Paste the contents into the input field and submit it.

nvim is install /usr/bin/nvim here. to check use the which command = which nvim


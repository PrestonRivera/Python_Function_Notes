FILE EDITOR NOTES:

If Nano was opened, press ctrl+x, then y to confirm, and Enter to save.
If Vim was opened, press esc, then : to enter command mode, then wq to write and quit.
If VSC-de was opened, press ctrl+s or cmd+s to save, then click the x button to close.

man git for git manual:

Shortcuts for the manual:

q: Quits the manual
j: One line down
k: One line up
d: Half page down
u: Half page up
/term: Search for "term" (WORD)
n: Next search term
N: Previous search term
Search for the term AUTHORS (all caps) and answer the question.

cat ~/.gitconfig is used to view the global git config being used. 

mine is set to 
 ✓  Running: cat ~/.gitconfig │
╰┬─────────────────────────────╯
 ├─  ✓  Expect exit code 0
 ├─  ✓  Expect stdout to contain all of:
 │       - 'email ='
 │       - 'name ='
 │       - 'defaultBranch = master'



git init is used to create a new Git repo through the termianl.

can only view hidden contents of directory using the ls -a command

CREATING A NEW GIT REPO:

cd ~ = To go to home directory/root

mkdir direct_name = creates the new directory

cd directory_name = to go into the directory

git init = enter this into the command line to initialize the git repo

git log remote/branch EX: git log origin/primeagen = if you wanted to see the commits of a branch named primeagen from a remote named origin you would run

git log --oneline origin/update_dune = will show the commits in the remote repo (origin) aka webflyx repo. call command from the local repo. 
 
 ~/webflyx-local$ git log --oneline origin/update_dune
ecd43d3 (origin/update_dune) I: Added quote 'Fear is the mind-killer.'
6202a48 H: Added quote 'The spice must flow.'
ecbfd26 (origin/main) G: add new movie to list
48031b3 F: Merge branch 'add_classics'
fc835a8 E: Add contents to file
a1fe7b1 D: add classics.csv
169a191 C: add quotes
cdb5fd4 B: add missing title and fix typo
8e9ab7f Update contents.md
465ddc8 A: add contents.md

git merge remote/branch <--syntax--> = git merge origin/main = command used to merge the branches from the remote repo main branch to the local repo main branch. fast-forward merge since th elocal repo main branch is empty. Run this from the local repo 


git push origin <localbranch>:<remotebranch> = command used to  push a local branch to a remote with a different name:

git push origin :<remotebranch> = You can also delete a remote branch by pushing an empty branch to it:

git push origin main = The git push command pushes (sends) local changes to any "remote" - in our case, GitHub. For example, to push our local main branch's commits to the remote origin's main branch we would run:

git rebase -i HEAD~3 = Start an interactive rebase on the commit before the faulty one; This will open an editor with the last 3 commits.

Got it, you want to remove the extra I: Dummy commit for merge. We can do this using an interactive rebase:

Switch to the main branch (if you're not already on it):

git checkout main

Start an interactive rebase on the commit before the faulty one:

git rebase -i HEAD~3

This will open an editor with the last 3 commits.

In the editor that opens, you’ll see a list of recent commits. Find the line that starts with pick and refers to the I: Dummy commit for merge. Change pick to drop for that commit.

It might look something like this:

pick 482112f J: Update classics.csv
drop 324c901 I: Dummy commit for merge
pick 88cebb9 K: Merge update_dune to main

Save and close the editor.

Important Note: Interactive rebase rewrites history, so it’s typically best used on local commits that haven’t been pushed to a shared repository.

After cleaning up the commit history, you might need to force push the changes to your remote repository:

git push --force origin main

echo "Dummy change" >> README.md = creating a dummy commit to fix a previouse commit that was already merged to the remote repo. 



c1fd8e9 (HEAD -> main) K: Merge Branch update_dune
5ee4ff0 (update_dune) DUMMY COMMIT
0895c19 I: DUMMY COMMIT 4
0cc6b8c I: Another dummy commit for merge
01d6435 I: Dummy commit for merge
324c901  (origin/main) J: Update classics.csv







ADDING A REMOTE:

webflyx-local: This is your local repository where you are making changes and working on your code.
webflyx: This is your remote repository (which we've named origin). It could be hosted on a service like GitHub, GitLab, or just another directory on your system, and it's where you push your changes to share them with others or backup your work.

Local Repo (webflyx-local): Your private working area.
Remote Repo (webflyx named as origin): The central place (or "authoritative source of truth") where you push your changes for collaboration or storage.

Here’s a typical workflow with remotes:

Clone or Add Remote: You start by having a remote repository like origin.
Fetch or Pull: You get the latest changes from this remote.
Make Local Changes: You create branches, commit changes to your local repository.
Push Changes: You push your changes back to the remote repository where others can access and collaborate on the updated code.

git fetch = command downloads copies of all the contents of the .git/objects directory (and other book-keeping information) from the remote repository into your current one.

find .git/objects = command used to see all the new objects in the repo.


A file can be in one of several states in a Git repository. Here are a few important ones:

untracked: Not being tracked by Git

staged: Marked for inclusion in the next commit

committed: Saved to the repository's history

git status is a command that shows you the current state of your repo. It will tell you which files are untracked, staged, and committed.



STAGING:

git add = command used to stage a file before committing it later. For example:

git add file.csv

so  after creating a file it needs to be staged or added to the index before we can commit it. The satging process is used to prevent having every new file committed. 

Are you confident the commit included both files? Maybe check the last commit to ensure both files were added correctly. You can do this by running:

git show --name-only

COMMIT:

Similar to saving a file that's been edited, a commit records changes to one or more files in your branch. Git assigns each commit a unique ID, called a SHA or hash, that identifies:

The specific changes
When the changes were made
Who created the changes
When you make a commit, you must include a commit message that briefly describes the changes.
A commit is a snapshot of the repository at a given point in time. It's a way to save the state of the repository, and it's how Git keeps track of changes to the project. A commit comes with a message that describes the changes made in the commit.

Git stores author information so that when you're making a commit it can track who made the change. Here's how you might update your global Git configuration (don't do this yet):

git config --add --global user.name "ThePrimeagen"
git config --add --global user.email "the.primeagen@aol.com"

Let's take the command apart:

git config: The command to interact with your Git configuration.
--add: Flag stating you want to add a configuration.
--global: Flag stating you want this configuration to be stored globally in your ~/.gitconfig. The opposite is "local", which stores the configuration in the current repository only.
user.name: The configuration key you want to set.
"ThePrimeagen": The value you want to set for the key.


git commit -m "your message here" this is the commit command -m flag is used to add a message. 

If you screw up a commit message, you can change it with the --amend flag. For example:

git commit --amend -m "A: add contents.md"


A Git repo is a (potentially very long) list of commits, where each commit represents the full state of the repository at a given point in time.


The git log command shows a history of the commits in a repository. This is what makes Git a version control system. You can see:

Who made a commit
When the commit was made
What was changed

Each commit has a unique identifier called a "commit hash". This is a long string of characters that uniquely identifies the commit. Here's an example of mine:
5ba786fcc93e8092831c01e71444b9baa2228a4f

For convenience, you can refer to any commit or change within Git by using the first 7 characters of its hash. For mine, that's 5ba786f.


git log (assuming the log is long enough) starts an interactive pager. You can scroll through the log with the arrow keys, and exit by pressing q.

ext, run git log again, but this time use the -n and --no-pager options to limit the maximum number of commits shown, and more importantly, to run it without the interactive pager. E.g.:
git --no-pager log -n 10


You may have noticed that even though we (you and I) both have the same content in our repositories, we have different commit hashes. While commit hashes are derived from their content changes, there's also some other stuff that affects the end hash. For example:

The commit message
The author's name and email
The date and time
Parent (previous) commit hashes



NOTE: HASH = SHA
Git uses a cryptographic hash function called SHA-1 (Secure hash algorithm) to generate commit hashes. We won't go into the details of how SHA-1 works in this course, but it's important to know because you might also hear commit hashes referred to as "SHAs".

List the contents of the .git/objects directory using ls -al .git/objects.
Find the directory within .git/objects that matches the first two characters of your commit hash (46 in this case).
List the contents of that directory using ls -al again to find the corresponding file.
 
ls -al .git/objects/46

total 12
drwxr-xr-x 2 prestonrivera prestonrivera 4096 May 22 21:16 .
drwxr-xr-x 7 prestonrivera prestonrivera 4096 May 22 21:16 ..
-r--r--r-- 1 prestonrivera prestonrivera  138 May 22 21:16 5ddc8dc6502e8164a2cc0520edbefc65e39964

ls -al .git/objects/46/5ddc8dc6502e8164a2cc0520edbefc65e39964

-r--r--r-- 1 prestonrivera prestonrivera 138 May 22 21:16 .git/objects/46/5ddc8dc6502e8164a2cc0520edbefc65e39964

cat path/to/file you can run this but it will be a mess

EXAMPLE:

xxd path/to/file

prestonrivera@DESKTOP-VV8TK75:~/webflyx$ xxd .git/objects/46/5ddc8dc6502e8164a2cc0520edbefc65e39964
00000000: 7801 a58d db0d c230 0c00 f9ce 145e 80ca  x......0.....^..
00000010: 7642 ab22 8460 03c4 0679 b850 8924 2835  vB.".`...y.P.$(5
00000020: cc4f 0523 f079 f771 176b ceb3 02a3 dd68  .O.#.y.q.k.....h
00000030: 1301 1689 3c05 1fa7 1446 2174 6269 f276  ....<....F!tbi.v
00000040: 0891 83b0 1b7a 1116 1c9d f12f bdd7 0697  .....z...../....
00000050: 268b d672 9ddf d23c 1c9e 3f6c 5f64 a2d3  &..r...<..?l_d..
00000060: 2dfb f9d1 c59a 8f40 03f5 ce62 4f04 5bdc  -......@...bO.[.
00000070: 219a d5ae 6f95 ff2a e6bc 079f 12c4 5a54  !...o..*......ZT
00000080: 8a2e 5d4e e603 22e1 4438                 ..]N..".D8

xxd command to print the contents of the file in hexadecimal format.



Git has a built-in plumbing command, cat-file, that allows us to see the contents of a commit without needing to futz around with the object files directly.

git cat-file -p hash

my commit hash:
465ddc8dc6502e8164a2cc0520edbefc65e39964
new commit hash:
8e9ab7f33918401d393b6e00ad4ee46431d15dd6


tree: git's way of storing a directory
blob: git's way of storing a file


Edit the contents.md file:

echo "# contents" > contents.md

Stage and commit the change:

git add contents.md

git commit -m "Update contents.md"

Get the new commit's hash:

git log -1 --format=format:%H




Reminder of commands:

git log (q to exit, arrow keys to scroll)

git cat-file -p <hash>

log is a porcelain command, while cat-file is a plumbing command. You'll use log much more often when working on coding projects, but cat-file is useful for understanding Git's internals.



BOOTS HELP:

prestonrivera@DESKTOP-VV8TK75:~/webflyx$ cat titles.md

TITLES
*A River Runs Through It
*Fight Club
*12 Year a Slave
*The Big Short


It seems you're missing one title from the titles.md file as specified in the instructions. Let's cross-check with the required list:

A River Runs Through It
Fight Club
12 Years a Slave
The Big Short
12 Monkeys
You have:

A River Runs Through It
Fight Club
12 Year a Slave (This should be "12 Years a Slave", not "12 Year a Slave")
The Big Short
Missing: 12 Monkeys.

What do you think you need to change in your titles.md file to include all the specified titles correctly?

Not to worry, young coder! Here’s a simple way to edit your titles.md file:

Open the file for editing:
You can use a text editor in the command line. For example, nano or vim.

nano titles.md

After running this command, your file will open in the editor.

Edit the file:

Fix the typo "12 Year a Slave" to "12 Years a Slave".
Add the missing title "12 Monkeys".
The file should look like this:

# Titles

* A River Runs Through It
* Fight Club
* 12 Years a Slave
* The Big Short
* 12 Monkeys

Save the file:
If you are using nano, save and exit by pressing Ctrl+O (to write) and then Enter (to confirm), then Ctrl+X to exit the editor.

After editing and saving the file, don't forget to stage and commit the changes with a message starting with B:.

git add titles.md
git commit -m "B: Fixed titles and added missing title"

Then, you can proceed with inspecting the commit using git cat-file.

Give that a try and let me know how it goes!


prestonrivera@DESKTOP-VV8TK75:~/webflyx$ cat titles.md

TITLES
A River Runs Through It
Fight Club
12 Years a Slave
The Big Short
12 Monkeys

Excellent! Your titles.md file now looks correct.

Next, make sure to stage and commit your changes using the following commands:

Stage the change

git add titles.md

Commit the change with a message that starts with B::

git commit -m "B: add missing title and fix typo"

After committing, use git cat-file -p to inspect the commit you just made:

git log -n 1 --pretty=oneline

This will give you the hash of your latest commit. Copy the hash and then inspect the commit object:

git cat-file -p <your_commit_hash>

git add . us the command used to stage all repos at once

or you can stage seperatly like this

git add quotes/starwars.md
git add quotes/dune.md

git config --add --global = command used to add coonfigs globally, acrossed all commits. 

git config --add = used to set local configs. --local is not needed when setting configs cause local is the default setting. 

git config --global --unset = used to remove global configs. 

git config --unset = used to remove local configs. 

--unset-all = flag used to remove all keys from a config. Example: git config --unset-all webflyx.ceo will remove all weblyx.ceo configs. 

git config --list --global = used to view local global configs. 
or 
cat ~/.gitconfig = global is usually stored in the users home directory in a file named .gitconfig

git config --list --local = used to check the configs you just added locally
or
cat .git/config

The system configuration is typically stored in the Git installation directory. The exact location can vary depending on your operating system and how Git was installed. A common location is /etc/gitconfig. To view it, you can use:

cat /etc/gitconfig



--get flag is useful for getting a single value.

git config --get section.keyname

Keys are in the format = section.keyname 

For example:

user.name
webflyx.ceo


git config --remove-section section = command used to remove an entire section from your Git configuration. 



LOCATIONS:

There are several locations where Git can be configured. From more general to more specific, they are:

system: /etc/gitconfig, a file that configures Git for all users on the system
global: ~/.gitconfig, a file that configures Git for all projects of a user
local: .git/config, a file that configures Git for a specific project
worktree: .git/config.worktree, a file that configures Git for part of a project

90% of the time you will be using --global to set things like your username and email. The other 9% of the time you will be using --local to set project-specific configurations. The last 1% of the time you might need to futz with system and worktree configurations, but it's extremely rare.

If you set a configuration in a more specific location, it will override the same configuration in a more general location. For example, if you set user.name in the local configuration, it will override the user.name set in the global configuration.

.git/: This is the root directory where Git keeps all its version control metadata and configurations.

.git/refs/: This directory contains references or pointers to commit hashes. It's divided into several subdirectories, like heads for branches.

.git/refs/heads/: This directory specifically holds references for all branches.

Within .git/refs/heads/, you have files named after each branch (e.g., main, add_classics), and each file contains the commit hash that the corresponding branch points to.




GIT BRANCH:

A Git branch allows you to keep track of different changes separately.

git branch = command used to see what branch you are currently on. 

git branch -m oldname newname = command used to rename a branch. 

GitHub uses main as there default branch. Git uses master as the default branch. 

The goal is to update the init.defaultBranch setting specifically, and set its value to main. That involves adding a key-value pair to your global Git configuration.

git config --global init.defaultBranch main = command used to change the default branch to main. init.defaultBranch is the key and main is the value. 

git config --global --get init.defaultBranch = used to check what your default branch is. 

git branch my_new_branch = command used ot create a new branch. rarely used. 

git switch -c my_new_branch = command used to create a new branch and switch to it immediatly. The switch command allows you to switch branches, and the -c flag tells Git to create a new branch if it doesn't already exist.

git switch = is a command used to change branches

git checkout = an older version of the git switch command

git branch -d = used to delete a bracnh that is no longer being used. 





NOTES: 

--VISUALS--

Throughout the rest of this course, we will use text to represent branches and commits. For example:

A - B - C  main

means a branch called main with 3 commits. C is the most recent commit (the tip), B is the previous commit, and A is the commit before that. To represent multiple branches, we'll use multiple lines:

    D - E  other_branch
  /
A - B - C  main

Answer the questions based on this diagram:

        G - H    lanes_branch
      /
A - B - C - D   main
  \
   E - F        primes_branch

   ANSWER: A,B,G,H

When you create a new branch it, uses the current commit you are on as the branch base. For example, if you're on your main branch with 3 commits, A, B, and C, and then you run git switch -c my_new_branch, your new branch will look like this:

      my_new_branch
     /              \
A-B-C = main
            \
                Branch tips



Let's say you're in a state where you have two branches, each with their own unique commits:

A - B - C    main
   \
    D - E    other_branch


If you merge other_branch into main, Git combines both branches by creating a new commit that has both histories as parents. In the diagram below, F is a merge commit that has C and E as parents. F brings all the changes from D and E back into the main branch.

A - B - C - F    main
   \     /
    D - E        other_branch



VISUALIZING REBASE:

Say we have this commit history:

A - B - C    main
   \
    D - E    feature_branch

We're working on feature_branch, and want to bring in the changes our team added to main so we're not working with a stale branch. We could merge main into feature_branch, but that would create an additional merge commit. Rebase avoids a merge commit by replaying the commits from feature_branch on top of main. After a rebase, the history will look like this:

A - B - C         main
         \
          D - E   feature_branch



TO MERGE: 

git switch main = ensure you are in main branch.

git merge add_classics = merge the one branch into the currently switched/checked out branch which is main. 

git log --oneline --graph --all = used to view history in a ASCII art representation. 

git log --graph docs =

git log --all docs





steps to creat and commit a file. 

step 1 = creat file = cat > file_name.csv, once created with this command you can add contents to file immedialty and save with ctrl + c.

step 2 = stage the file = git add file_name.csv

step 3 = commit the file and add message = git commit -m "A: Message here"

step 4 = verify file added to commits = git log

git commit --amend -m "A: New message" = used ot change message on recent commit.

git log = shows the history of commits in your repo. 

git log --decorate=full = shows the full ref name. A ref is just a pointer to a commit. All branches are refs but not all refs are branches. 

git log --decorate=no = shows no decoration. 

git log --oneline = used to view a compact view of your log. 

git reset = The git reset command can be used to reset any changes in the index (staged but not committed changes) and the worktree (unstaged and not committed changes).

git reset --hard = This is useful if you just want to discard all your current changes and go back to the last commit. once deleted you can not get them back....BE SURE

git log --oneline --decorate --graph --parents

Your output from git log --oneline --decorate --graph --parents (aside from the hashes) should look something like:

*   89629a9 d234104 b8dfd64 (HEAD -> main) F: Merge branch 'add_classics'
|\
| * b8dfd64 fba0999 (tag: 5.8, add_classics) D: add classics
* | d234104 fba0999 (tag: 6.1) E: update contents
|/
* fba0999 1381199 (tag: 3.8, origin/master, origin/main, master) C: add quotes
* 1381199 a21228f (tag: 3.7) B: add titles.md
* a21228f A: add contents.md

Each asterisk * represents a commit in the repository. There are multiple commit hashes on each line because the --parents flag logs the parent hash(es) as well.

The first line, with these three hashes: 89629a9 d234104 b8dfd64 is our recent merge commit. The first hash, 89629a9 is the merge commit's hash, and the other two are the parent commits.
The next section is a visual representation of the branch structure. It shows the commits on the add_classics branch and the main branch before the merge. Notice that they both share a common parent.
The next three lines are just "normal" commits, each pointing to their parent.
The last line is the initial commit and therefore has no parent.


EDITING FILE COMMITTING CAHNGES THEN REBASING BRANCH TO MAIN:

While on the update_dune branch

nano quotes/dune.md
# Add: 'The spice must flow.'

git add quotes/dune.md
git commit -m "H: Added quote 'The spice must flow.'"

# Then make sure you add the second quote and commit:
nano quotes/dune.md
# Add: "Fear is the mind-killer."

git add quotes/dune.md
git commit -m "I: Added quote 'Fear is the mind-killer.'"

git rebase main
# Rebase update_dune onto main:
This will:
# Take the commits from update_dune.
# Replay them onto the latest state of the main branch, effectively applying your changes on top of main.



MY SOLO WORKFLOW
When I'm working by myself, I usually stick to a single branch, main. I mostly use Git on solo projects to keep a backup remotely and to keep a history of my changes. I only rarely use separate branches.

Make changes to files
git add . (or git add <files> if I only want to add specific files)
git commit -m "a message describing the changes"
git push origin main
It really is that simple for most solo work. git log, git reset, and some others are of course useful from time to time, but the above is the core of what I do day-to-day.



MY TEAM WORKFLOW
When you're working with a team Git gets a bit more involved (and we'll cover more of this in part 2 of this course). Here's what I do:

Update my local main branch with git pull origin main
Checkout a new branch for the changes I want to make with git switch -c <branchname>
Make changes to files
git add .
git commit -m "a message describing the changes"
git push origin <branchname> (I push to the new branch name, not main)
Open a pull request on GitHub to merge my changes into main
Ask a team member to review my pull request
Once approved, click the "Merge" button on GitHub to merge my changes into main
Delete my feature branch, and repeat with a new branch for the next set of changes



REBASE VS MERGE
I've configured Git to rebase by default on pull, rather than merge so I keep a linear history. If you want to do the same, you can add this to your global Git config:

git config --global pull.rebase true


git clone https://github.com/USERNAME/repo_name = Command used to clone a created repo on github into your created directory in CLI.

The * character matches any number of characters except for a slash (/). For example, to ignore all .txt files, you could use the following pattern:

*.txt

ROOTED PATTERNS
Patterns starting with a / are anchored to the directory containing the .gitignore file. For example, this would ignore a main.py in the root directory, but not in any subdirectories:

/main.py

NEGATION
You can negate a pattern by prefixing it with an exclamation mark (!). For example, to ignore all .txt files except for important.txt, you could use the following pattern:

*.txt
!important.txt


COMMENTS
You can add comments to your .gitignore file by starting a line with a #. For example:

# Ignore all .txt files
*.txt


explorer.exe advert.html = used this to open an html file in my browser


